'use client'

import Head from "next/head";
import { io } from "socket.io-client";
import { useEffect, useState } from "react";
import { useUsername } from "../_app";
import { useRouter } from "next/navigation";
import { Msg } from "@/lib/next";

export default function Chat() {
  const [chat, setChat] = useState<Msg[]>([]);
  const [msg, setMsg] = useState<string>("");
  const [colorAvatar, setColorAvatar] = useState<string>("");
  const { username } = useUsername();
  const router = useRouter();

  useEffect((): any => {
    // connect to socket server
    fetch("/api/socket");
    var socket = io({ upgrade: false });

    if (username === "" || username === undefined) {
        router.push("/");
    }

    setColorAvatar(generateColor());

    // log socket connection
    socket.on("connect", () => {
        console.log("CONNECTION ESTABLISHED FOR " + socket.id);
    });

    socket.on("allMessages", (chats) => {
        setChat(chats);
    });

    const messageBox = document.querySelector("#messageBox");
    socket.on("newMsg", (msg: Msg) => {
        setChat((prevChat) => [...prevChat, msg]);
        socket.emit("newMessages", msg);
        setTimeout(() => {
            messageBox?.scrollTo(0, messageBox.scrollHeight);
        }, 50);
    });

    // socket disconnect onUnmount if exists
    if (socket) return () => socket.disconnect();
  }, []);

  function generateColor() {
    const allChar = "ABCDEF012345689";

    const fullColor = new Array(6)
      .fill("")
      .map((element) =>
        allChar.charAt(Math.floor(Math.random() * allChar.length))
      )
      .join("");

    return "#" + fullColor;
  }

  const addMsg = async (e: { preventDefault: () => void }) => {
    e.preventDefault();
    const inputMsg: HTMLInputElement | null =
      document.querySelector("#InputChat");
    const messageBox = document.querySelector("#messageBox");

    if (msg) {
      // build message obj
      const message: Msg = {
        id: Math.floor(Math.random() * 2000),
        colorAvatar: colorAvatar,
        username: username,
        message: msg,
      };

      // dispatch message to other users
      const resp = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(message),
      });

      // reset field if OK
      if (resp.ok && inputMsg) {
        setMsg("");
        inputMsg.value = "";
        setTimeout(() => {
          messageBox?.scrollTo(0, messageBox.scrollHeight);
        }, 50);
      }
    }
  };

  return (
    <>
      <Head>
        <title>Live Chat App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        id="map"
        className="flex items-center justify-center w-screen h-screen bg-zinc-800"
      >
        <div className="flex flex-col justify-end w-full h-full overflow-hidden shadow-xl md:w-2/3 md:h-2/3 bg-zinc-700/20 rounded-xl ring-1 ring-inset ring-white/10">
          <div id="messageBox" className="overflow-scroll">
            {chat
              ? chat.map((msg, msgIndex) => (
                  <div
                    key={msgIndex}
                    className="p-5 border-t-[1px] border-white/10 flex items-center gap-6"
                  >
                    <span
                      className="block w-12 h-12 rounded-full"
                      style={{ backgroundColor: msg.colorAvatar }}
                    ></span>
                    <div>
                      <h2 className="mb-2 font-bold text-white">
                        {msg.username}
                      </h2>
                      <p className="text-lg text-white/70">{msg.message}</p>
                    </div>
                  </div>
                ))
              : ""}
          </div>
          <form action="" className="m-4" onSubmit={addMsg}>
            <div className="flex gap-2">
              <input
                type="text"
                className="w-5/6 p-2 text-white rounded-md lg:w-11/12 bg-zinc-600 highlight-white focus-visible:outline-none"
                onChange={(e) => setMsg(e.target.value)}
                id="InputChat"
                placeholder="Message..."
                autoComplete="off"
              />
              <button
                className="w-1/6 p-2 text-white transition-colors rounded-md lg:w-1/12 bg-zinc-600 highlight-white hover:bg-zinc-700 active:bg-zinc-800"
                type="submit"
              >
                Send
              </button>
            </div>
          </form>
        </div>
      </main>
    </>
  );
}
